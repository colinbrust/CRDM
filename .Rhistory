dplyr::arrange(date) %$%
raster::stack(fname)
true_maps <-  map_list %>%
dplyr::filter(variable == 'full') %>%
dplyr::arrange(date) %$%
raster::stack(fname)
test = var_maps - true_maps
test
test2 = raster::mean(test)
raster::plot(test2)
diff_maps <- function(f_dir, variable) {
var_maps <- list.files(f_dir, pattern = variable, full.names = T) %>%
grep('preds.tif', ., invert = T, value = T) %>%
tibble::tibble(fname = .)
true_maps = list.files(f_dir, pattern = 'full', full.names = T) %>%
tibble::tibble(fname = .)
map_list <- dplyr::bind_rows(var_maps, true_maps) %>%
dplyr::rowwise() %>%
dplyr::mutate(
date = basename(fname) %>%
stringr::str_sub(1, 8) %>%
lubridate::as_date(),
variable = basename(fname) %>%
stringr::str_split('_') %>%
unlist() %>%
tail(1) %>%
stringr::str_replace('.tif', '')
) %>%
janitor::get_dupes(date) %>%
dplyr::filter(dupe_count == 2)
var_maps <- map_list %>%
dplyr::filter(variable == !!variable) %>%
dplyr::arrange(date) %$%
raster::stack(fname)
true_maps <-  map_list %>%
dplyr::filter(variable == 'full') %>%
dplyr::arrange(date) %$%
raster::stack(fname)
raster::mean(var_maps - true_maps)
}
a = diff_maps(f_dir, 'vapor')
raster::plot(a)
a = diff_maps(f_dir, 'sm-rootzonew')
a = diff_maps(f_dir, 'sm-rootzone')
raster::plot(a)
a = diff_maps(f_dir, 'fw')
raster::plot(a)
a = diff_maps(f_dir, 'sm-surface')
raster::plot(a)
a = diff_maps(f_dir, 'et')
a = diff_maps(f_dir, 'ET')
a = diff_maps(f_dir, 'gpp')
a = diff_maps(f_dir, 'ET')
raster::plot(a)
a = diff_maps(f_dir, 'vpd')
raster::plot(a)
a = diff_maps(f_dir, 'vs')
raster::plot(a)
library(reticulate)
library(magrittr)
library(ggplot2)
use_condaenv("gee", conda = "/opt/miniconda3/bin/conda")
source_python('~/projects/DroughtCast/crdm/utils/ReadPickle.py')
source('https://raw.githubusercontent.com/colinbrust/DroughtCast/revert/crdm/R/PlotTheme.R')
strip_text = function(x) {
x %>%
stringr::str_split('-') %>%
lapply(magrittr::extract, -1) %>%
as.numeric()
}
read_file <- function(f) {
read_pickle(f) %>%
lapply(function(x) lapply(x,mean)) %>%
lapply(tibble::as_tibble) %>%
dplyr::bind_rows() %>%
tibble::rowid_to_column() %>%
dplyr::mutate(f = basename(f)) %>%
tidyr::separate(
f,
c('epochs', 'batch', 'nWeeks', 'hiddenSize',
'leadTime', 'rmFeatures', 'init', 'rerun', 'fType'),
sep='_'
) %>%
dplyr::select(-dplyr::starts_with('drop')) %>%
dplyr::mutate_at(
c('epochs', 'batch', 'nWeeks', 'hiddenSize', 'leadTime', 'rerun'),
strip_text
) %>%
dplyr::mutate(rowid = rowid + (epochs * rerun))
}
plot_all <- function(f_dir='~/projects/DroughtCast/data/model_results/') {
f_dir %>%
list.files(full.names = T, pattern = 'err.p') %>%
lapply(read_file) %>%
dplyr::bind_rows() %>%
tidyr::pivot_longer(c(train, test), names_to='set') %>%
dplyr::mutate(batch = factor(batch),
hiddenSize = factor(hiddenSize),
nWeeks = factor(nWeeks)) %>%
dplyr::filter(epochs != 20) %>%
ggplot(aes(x=rowid, y=value, color=set)) +
geom_line() +
facet_wrap(~leadTime) +
labs(x='Epoch', y='MSE Loss', color='# Month\nHistory') +
plot_theme()
}
f_dir='~/projects/DroughtCast/data/model_results/lt_all/'
f_dir %>%
list.files(full.names = T, pattern = 'err.p') %>%
lapply(read_file) %>%
dplyr::bind_rows() %>%
tidyr::pivot_longer(c(train, test), names_to='set') %>%
dplyr::mutate(batch = factor(batch),
hiddenSize = factor(hiddenSize),
nWeeks = factor(nWeeks)) %>%
dplyr::filter(epochs != 20) %>%
ggplot(aes(x=rowid, y=value, color=set)) +
geom_line() +
facet_wrap(~leadTime) +
labs(x='Epoch', y='MSE Loss', color='# Month\nHistory') +
plot_theme()
f_dir='~/projects/DroughtCast/data/model_results/lt_all2/'
f_dir %>%
list.files(full.names = T, pattern = 'err.p') %>%
lapply(read_file) %>%
dplyr::bind_rows() %>%
tidyr::pivot_longer(c(train, test), names_to='set') %>%
dplyr::mutate(batch = factor(batch),
hiddenSize = factor(hiddenSize),
nWeeks = factor(nWeeks)) %>%
dplyr::filter(epochs != 20) %>%
ggplot(aes(x=rowid, y=value, color=set)) +
geom_line() +
facet_wrap(~leadTime) +
labs(x='Epoch', y='MSE Loss', color='# Month\nHistory') +
plot_theme()
library(ggplot2)
library(magrittr)
source('https://raw.githubusercontent.com/colinbrust/CRDM/develop/crdm/R/PlotTheme.R')
library(ggplot2)
library(magrittr)
source('https://raw.githubusercontent.com/colinbrust/DroughtCast/revert/crdm/R/PlotTheme.R')
pred_dir = '~/projects/DroughtCast/data/model_results/lt_all'
true_dir = '~/projects/DroughtCast/data/out_classes/out_tif'
make_info_df <- function(x, lt) {
x %>%
list.files(full.names = T) %>%
tibble::tibble(f_name = .) %>%
dplyr::rowwise() %>%
dplyr::mutate(date = basename(f_name) %>%
stringr::str_split('_')%>%
unlist() %>%
magrittr::extract(1) %>%
lubridate::as_date(),
lead_time = lt)
}
raster_to_tibble <- function(f, lead_time) {
f %>%
raster::raster() %>%
raster::rasterToPoints() %>%
tibble::as_tibble() %>%
`colnames<-`(c('x', 'y', 'val')) %>%
dplyr::mutate(lead_time = lead_time)
}
plot_single_day <- function(dat, day,  states) {
caption <- paste('Prediction for', day, 'USDM Drought')
out_dat <- dat %>%
dplyr::mutate(
val = ifelse(lead_time == -1, val, val * 5),
val = round(val),
lead_time = as.character(lead_time),
lead_time = ifelse(lead_time == '-1',
'USDM Drought',
paste(lead_time, 'Week Lead Time')
),
val = dplyr::recode(
val,
`0` = 'No Drought',
`1` = 'D0',
`2` = 'D1',
`3` = 'D2',
`4` = 'D3',
`5` = 'D4'),
val = ifelse(val == 'NA', NA, val)
)
fig <- ggplot() +
geom_raster(data = out_dat, mapping = aes(x=x, y=y, fill = val)) +
geom_sf(data = states, mapping = aes(), fill = NA, size=0.5) +
# theme(aspect.ratio = 264/610) +
labs(x='', y='', fill='Drought\nCategory') +
scale_fill_manual(values = c('No Drought' = NA,
'D0' = '#FFFF00',
'D1' = '#FCD37F',
'D2' = '#FFAA00',
'D3' = '#E60000',
'D4' = '#730000')) +
facet_wrap(~lead_time, nrow = 2) +
labs(title=caption) +
plot_theme()
}
df <- purrr::map2(
# .x = c('./data/model_results/out_maps2', './data/model_results/out_maps4',
#        './data/model_results/out_maps6', './data/model_results/out_maps8',
#        './data/out_classes/out_tif'),
.x = c('./data/model_results/lt_all/out_maps', './data/out_classes/out_tif'),
.y = c(2, 4, 6, 8, -1),
.f = make_info_df
) %>%
dplyr::bind_rows() %>%
split(.$date) %>%
Filter(function(y) NROW(y) >= 4, .) %>%
lapply(function(x) {
day <- unique(x$date)
x %$%
purrr::map2(f_name, lead_time, raster_to_tibble) %>%
dplyr::bind_rows() %>%
plot_single_day(day=day, states=states)
})
x = '~/projects/DroughtCast/data/model_results/lt_all'
x %>%
list.files(full.names = T)
x = '~/projects/DroughtCast/data/model_results/lt_all/out_maps'
x %>%
list.files(full.names = T) %>%
tibble::tibble(f_name = .)
x %>%
list.files(full.names = T) %>%
tibble::tibble(f_name = .) %>%
tidyr::separate(f_name, c('date', 'variable', 'lead_time'), '_') %>%
dplyr::mutate(date = lubridate::as_date(date),
lead_time = stringr::str_replace(lead_time, '.tif', '') %>%
as.numeric())
x %>%
list.files(full.names = T) %>%
tibble::tibble(f_name = .) %>%
tidyr::separate(basename(f_name), c('date', 'variable', 'lead_time'), '_') %>%
dplyr::mutate(date = lubridate::as_date(date),
lead_time = stringr::str_replace(lead_time, '.tif', '') %>%
as.numeric())
x %>%
list.files(full.names = T) %>%
tibble::tibble(f_path = .) %>%
dplyr::mutate(f = basename(f_path)) %>%
tidyr::separate(basename(f), c('date', 'variable', 'lead_time'), '_') %>%
dplyr::mutate(date = lubridate::as_date(date),
lead_time = stringr::str_replace(lead_time, '.tif', '') %>%
as.numeric())
x %>%
list.files(full.names = T) %>%
tibble::tibble(f_path = .) %>%
dplyr::mutate(f = basename(f_path))
x %>%
list.files(full.names = T) %>%
tibble::tibble(f_path = .) %>%
dplyr::mutate(f = basename(f_path)) %>%
tidyr::separate(basename(f), c('date', 'variable', 'lead_time'), '_')
x %>%
list.files(full.names = T) %>%
tibble::tibble(f_path = .) %>%
dplyr::mutate(f = basename(f_path)) %>%
tidyr::separate(f, c('date', 'variable', 'lead_time'), '_') %>%
dplyr::mutate(date = lubridate::as_date(date),
lead_time = stringr::str_replace(lead_time, '.tif', '') %>%
as.numeric())
x = '~/projects/DroughtCast/data/out_classes/out_tif'
x %>%
list.files(full.names = T) %>%
tibble::tibble(f_path = .) %>%
dplyr::mutate(f = basename(f_path)) %>%
tidyr::separate(f, c('date', 'variable', 'lead_time'), '_') %>%
dplyr::mutate(date = lubridate::as_date(date),
lead_time = stringr::str_replace(lead_time, '.tif', '') %>%
as.numeric())
x %>%
list.files(full.names = T) %>%
tibble::tibble(f_path = .) %>%
dplyr::mutate(f = basename(f_path)) %>%
tidyr::separate(f, c('date', 'variable', 'lead_time'), '_') %>%
dplyr::mutate(date = lubridate::as_date(date),
lead_time = stringr::str_replace(lead_time, '.tif', '') %>%
as.numeric(),
variable = ifelse(variable == 'USDM.tif', 'true', variable))
x %>%
list.files(full.names = T) %>%
tibble::tibble(f_path = .) %>%
dplyr::mutate(f = basename(f_path)) %>%
tidyr::separate(f, c('date', 'variable', 'lead_time'), '_') %>%
dplyr::mutate(date = lubridate::as_date(date),
variable = ifelse(variable == 'USDM.tif', 'true', variable),
lead_time = ifelse(is.na(lead_time), -1,
stringr::str_replace(lead_time, '.tif', '') %>%
as.numeric()))
x = '~/projects/DroughtCast/data/model_results/lt_all/out_maps'
x %>%
list.files(full.names = T) %>%
tibble::tibble(f_path = .) %>%
dplyr::mutate(f = basename(f_path)) %>%
tidyr::separate(f, c('date', 'variable', 'lead_time'), '_') %>%
dplyr::mutate(date = lubridate::as_date(date),
variable = ifelse(variable == 'USDM.tif', 'true', variable),
lead_time = ifelse(is.na(lead_time), -1,
stringr::str_replace(lead_time, '.tif', '') %>%
as.numeric()))
make_info_df <- function(x) {
x %>%
list.files(full.names = T) %>%
tibble::tibble(f_path = .) %>%
dplyr::mutate(f = basename(f_path)) %>%
tidyr::separate(f, c('date', 'variable', 'lead_time'), '_') %>%
dplyr::mutate(date = lubridate::as_date(date),
variable = ifelse(variable == 'USDM.tif', 'true', variable),
lead_time = ifelse(is.na(lead_time), -1,
stringr::str_replace(lead_time, '.tif', '') %>%
as.numeric()))
}
pred_dir = '~/projects/DroughtCast/data/model_results/lt_all/out_maps'
true_dir = '~/projects/DroughtCast/data/out_classes/out_tif'
make_info_df <- function(x) {
x %>%
list.files(full.names = T) %>%
tibble::tibble(f_path = .) %>%
dplyr::mutate(f = basename(f_path)) %>%
tidyr::separate(f, c('date', 'variable', 'lead_time'), '_') %>%
dplyr::mutate(date = lubridate::as_date(date),
variable = ifelse(variable == 'USDM.tif', 'true', variable),
lead_time = ifelse(is.na(lead_time), -1,
stringr::str_replace(lead_time, '.tif', '') %>%
as.numeric()))
}
raster_to_tibble <- function(f, lead_time) {
f %>%
raster::raster() %>%
raster::rasterToPoints() %>%
tibble::as_tibble() %>%
`colnames<-`(c('x', 'y', 'val')) %>%
dplyr::mutate(lead_time = lead_time)
}
plot_single_day <- function(dat, day,  states) {
caption <- paste('Prediction for', day, 'USDM Drought')
out_dat <- dat %>%
dplyr::mutate(
val = ifelse(lead_time == -1, val, val * 5),
val = round(val),
lead_time = as.character(lead_time),
lead_time = ifelse(lead_time == '-1',
'USDM Drought',
paste(lead_time, 'Week Lead Time')
),
val = dplyr::recode(
val,
`0` = 'No Drought',
`1` = 'D0',
`2` = 'D1',
`3` = 'D2',
`4` = 'D3',
`5` = 'D4'),
val = ifelse(val == 'NA', NA, val)
)
fig <- ggplot() +
geom_raster(data = out_dat, mapping = aes(x=x, y=y, fill = val)) +
geom_sf(data = states, mapping = aes(), fill = NA, size=0.5) +
# theme(aspect.ratio = 264/610) +
labs(x='', y='', fill='Drought\nCategory') +
scale_fill_manual(values = c('No Drought' = NA,
'D0' = '#FFFF00',
'D1' = '#FCD37F',
'D2' = '#FFAA00',
'D3' = '#E60000',
'D4' = '#730000')) +
facet_wrap(~lead_time, nrow = 2) +
labs(title=caption) +
plot_theme()
}
lapply(c(pred_dir, true_dir), make_info_df)
lapply(c(pred_dir, true_dir), make_info_df) %>%
dplyr::bind_rows()
lapply(c(pred_dir, true_dir), make_info_df) %>%
dplyr::bind_rows()
err = F
lapply(c(pred_dir, true_dir), make_info_df) %>%
dplyr::bind_rows() %>%
dplyr::filter(ifelse(err), NA, variable == 'full' | variable == 'true')
!TRUE
lapply(c(pred_dir, true_dir), make_info_df) %>%
dplyr::bind_rows() %>%
dplyr::filter(if (!err) variable == 'full' | variable == 'true')
df <- lapply(c(pred_dir, true_dir), make_info_df) %>%
dplyr::bind_rows() %>%
dplyr::filter(if (!err) variable == 'full' | variable == 'true')
df %>%
split(.$date)
df %>%
split(.$date) %>%
Filter(function(x) NROW(x)  == 5)
df %>%
split(.$date) %>%
Filter(function(x) NROW(x)  == 5, .)
df %>%
split(.$date) %>%
Filter(function(x) NROW(x)  == 5, .) %>%
lapply(function(x) {
day <- unique(x$date)
x %$%
purrr::map2(f_name, lead_time, raster_to_tibble) %>%
dplyr::bind_rows() %>%
plot_single_day(day=day, states=states)
}) -> test
df %>%
split(.$date) %>%
Filter(function(x) NROW(x)  == 5, .) %>%
lapply(function(x) {
day <- unique(x$date)
x %$%
purrr::map2(f_path, lead_time, raster_to_tibble) %>%
dplyr::bind_rows() %>%
plot_single_day(day=day, states=states)
}) -> test
states <- urbnmapr::get_urbn_map(sf = TRUE) %>%
dplyr::filter(state_abbv != 'AK', state_abbv != 'HI') %>%
sf::st_transform(6933)
df %>%
split(.$date) %>%
Filter(function(x) NROW(x)  == 5, .) %>%
lapply(function(x) {
day <- unique(x$date)
x %$%
purrr::map2(f_path, lead_time, raster_to_tibble) %>%
dplyr::bind_rows() %>%
plot_single_day(day=day, states=states)
}) -> test
test
test[[1]]
df %>%
split(.$date) %>%
Filter(function(x) NROW(x)  == 5, .) %>%
lapply(function(x) {
day <- unique(x$date)
x %$%
purrr::map2(f_path, lead_time, raster_to_tibble) %>%
dplyr::bind_rows() %>%
plot_single_day(day=day, states=states)
}) -> test
df
df <- lapply(c(pred_dir, true_dir), make_info_df) %>%
dplyr::bind_rows() %>%
dplyr::filter(if (!err) variable == 'full' | variable == 'true')
df
df %>%
split(.$date) %>%
Filter(function(x) NROW(x)  == 5, .)
df %>%
split(.$date) %>%
Filter(function(x) NROW(x)  == 5, .) %>%
lapply(function(x) {
day <- unique(x$date)
x %$%
purrr::map2(f_path, lead_time, raster_to_tibble) %>%
dplyr::bind_rows() %>%
plot_single_day(day=day, states=states)
}) -> test
test[[2]]
df <- lapply(c(pred_dir, true_dir), make_info_df) %>%
dplyr::bind_rows() %>%
dplyr::filter(if (!err) variable == 'full' | variable == 'true')
df
df %>%
split(.$date) %>%
Filter(function(x) NROW(x)  == 5, .) %>%
lapply(function(x) {
day <- unique(x$date)
x %$%
purrr::map2(f_path, lead_time, raster_to_tibble) %>%
dplyr::bind_rows() %>%
plot_single_day(day=day, states=states)
}) -> test
test[[3]]
df <- lapply(c(pred_dir, true_dir), make_info_df) %>%
dplyr::bind_rows() %>%
dplyr::filter(if (!err) variable == 'full' | variable == 'true')
df %>%
split(.$date) %>%
Filter(function(x) NROW(x)  == 5, .)
df %>%
split(.$date) %>%
Filter(function(x) NROW(x)  == 5, .) %>%
lapply(function(x) {
day <- unique(x$date)
x %$%
purrr::map2(f_path, lead_time, raster_to_tibble) %>%
dplyr::bind_rows() %>%
plot_single_day(day=day, states=states)
}) -> test
test[[3]]
df <- lapply(c(pred_dir, true_dir), make_info_df) %>%
dplyr::bind_rows() %>%
dplyr::filter(if (!err) variable == 'full' | variable == 'true')
x %$%
purrr::map2(f_path, lead_time, raster_to_tibble) %>%
dplyr::bind_rows() %>%
plot_single_day(day=day, states=states)
df %>%
split(.$date) %>%
Filter(function(x) NROW(x)  == 5, .) %>%
lapply(function(x) {
day <- unique(x$date)
x %$%
purrr::map2(f_path, lead_time, raster_to_tibble) %>%
dplyr::bind_rows() %>%
plot_single_day(day=day, states=states)
}) -> test
test[[3]]
test[[1]]
