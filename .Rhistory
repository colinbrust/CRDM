day <- strip_date(f)
model <- clean_maps(f, states = states)
targets <- get_targets(target_dir, day, states)
# difference <- (targets - model) %>%
#   raster::rasterToPoints() %>%
#   tibble::as_tibble() %>%
#   `names<-`(c('x', 'y', 'lt_2', 'lt_4', 'lt_8', 'lt_12')) %>%
#   tidyr::pivot_longer(
#     dplyr::starts_with('lt'),
#     names_to = 'lead_time',
#     values_to = 'val'
#   ) %>%
#   dplyr::mutate(
#     lead_time = as.numeric(stringr::str_replace(lead_time, 'lt_', '')) - 1,
#     src = 'Difference',
#     day = lubridate::as_date(day)
#   ) %>%
#   label_model(txt = ' Difference ')
#
# sd <- file.path(pred_dir, 'sd', base) %>%
#   get_sd(day, states) %>%
#   label_model(txt = ' Std. Dev. ') %>%
#   dplyr::mutate(src = 'Std. Dev.')
p1 <- targets %>%
map_to_tidy(day = day) %>%
label_targets() %>%
dplyr::mutate(src = 'Target') %>%
dplyr::filter(val != 'No Drought') %>%
plot_data(states = states)
p2 <- model %>%
map_to_tidy(day = day) %>%
label_model(txt = ' Drought ') %>%
dplyr::mutate(src = 'Model') %>%
dplyr::filter(val != 'No Drought') %>%
plot_data(states = states)
p1/p2
# p3 <- plot_sd(sd, states)
# p4 <- plot_diff(difference, states)
#
# (p1)/(p2)/(p3)/(p4)
}
# lead time on x axis
plot_all <- function(f, target_dir='./data/tif_targets', states) {
day <- strip_date(f)
model <- clean_maps(f, states = states)
targets <- get_targets(target_dir, day, states)
# difference <- (targets - model) %>%
#   raster::rasterToPoints() %>%
#   tibble::as_tibble() %>%
#   `names<-`(c('x', 'y', 'lt_2', 'lt_4', 'lt_8', 'lt_12')) %>%
#   tidyr::pivot_longer(
#     dplyr::starts_with('lt'),
#     names_to = 'lead_time',
#     values_to = 'val'
#   ) %>%
#   dplyr::mutate(
#     lead_time = as.numeric(stringr::str_replace(lead_time, 'lt_', '')) - 1,
#     src = 'Difference',
#     day = lubridate::as_date(day)
#   ) %>%
#   label_model(txt = ' Difference ')
#
# sd <- file.path(pred_dir, 'sd', base) %>%
#   get_sd(day, states) %>%
#   label_model(txt = ' Std. Dev. ') %>%
#   dplyr::mutate(src = 'Std. Dev.')
p1 <- targets %>%
map_to_tidy(day = day) %>%
label_targets() %>%
dplyr::mutate(src = 'Target') %>%
dplyr::filter(val != 'No Drought') %>%
plot_data(states = states)
p2 <- model %>%
map_to_tidy(day = day) %>%
label_model(txt = ' Drought ') %>%
dplyr::mutate(src = 'Model') %>%
dplyr::filter(val != 'No Drought') %>%
plot_data(states = states)
p1/p2
# p3 <- plot_sd(sd, states)
# p4 <- plot_diff(difference, states)
#
# (p1)/(p2)/(p3)/(p4)
}
library(ggplot2)
library(magrittr)
library(patchwork)
source('./crdm/R/PlotTheme.R')
states <- urbnmapr::get_urbn_map(sf = TRUE) %>%
dplyr::filter(state_abbv != 'AK', state_abbv != 'HI') %>%
sf::st_transform(6933)
strip_date <- function(f) {
f %>%
basename() %>%
stringr::str_split('_') %>%
unlist() %>%
head(1)
}
clean_maps <- function(f, states) {
f %>%
raster::stack() %>%
raster::subset(subset = c(2, 4, 8, 12)) %>%
raster::mask(states)
}
map_to_tidy <- function(stack, day) {
stack %>%
raster::rasterToPoints() %>%
tibble::as_tibble() %>%
`names<-`(c('x', 'y', 'lt_2', 'lt_4', 'lt_8', 'lt_12')) %>%
tidyr::pivot_longer(
dplyr::starts_with('lt'),
names_to = 'lead_time',
values_to = 'val'
) %>%
dplyr::mutate(
day = lubridate::as_date(day),
val = dplyr::case_when(
val <= 3 ~ round(val),
TRUE ~ ceiling(val)
),
val = dplyr::recode(
val,
`0` = 'No Drought',
`1` = 'D0',
`2` = 'D1',
`3` = 'D2',
`4` = 'D3',
`5` = 'D4'),
lead_time = stringr::str_replace(lead_time, 'lt_', ''),
lead_time = as.numeric(lead_time) - 1)
}
label_model <- function(data, txt=' Forecast ') {
lab <- txt
data %>%
dplyr::mutate(
label = paste0(day + lubridate::weeks(lead_time), lab, '(', lead_time+1, ')'),
label = factor(label, levels = stringr::str_sort(unique(label), numeric=TRUE))
)
}
label_targets <- function(data) {
data %>%
dplyr::mutate(
label = paste0(day + lubridate::weeks(lead_time), ' USDM'),
label = factor(label, levels = stringr::str_sort(unique(label), numeric=TRUE))
)
}
get_targets <- function(f_dir, day, states) {
day <- lubridate::as_date(day)
dates <- seq(day, day + lubridate::weeks(11), by = 'weeks') %>%
stringr::str_replace_all('-', '') %>%
paste(collapse = '|')
f_dir %>%
list.files(full.names = T, pattern=dates) %>%
clean_maps(states = states)
}
plot_data <- function(data, states) {
colorRampPalette(c('#ffffff','#FFFF00','#FCD37F','#FFAA00','#E60000','#730000')) -> pal
ggplot() +
geom_raster(data = data, mapping = aes(x=x, y=y, fill=val)) +
geom_sf(data = states, mapping = aes(), fill=NA, size = 0.5) +
facet_grid(rows = dplyr::vars(src), cols = dplyr::vars(label), switch = 'y') +
plot_theme() +
# scale_fill_gradientn(na.value='grey26', colors = pal(100), limits = c(0, 5)) +
scale_fill_manual(values = c('No Drought' = NA,
'D0' = '#FFFF00',
'D1' = '#FCD37F',
'D2' = '#FFAA00',
'D3' = '#E60000',
'D4' = '#730000')) +
labs(x='', y='', fill='Drought\nCategory') +
scale_y_discrete(guide = guide_axis(check.overlap = TRUE)) +
theme(axis.text.x = element_text(angle = 45),
strip.placement = "outside",
plot.margin= grid::unit(c(0, 0, 0, 0), "in"))
}
get_sd <- function(f, day, states) {
f %>%
clean_maps(states = states) %>%
raster::rasterToPoints() %>%
tibble::as_tibble() %>%
`names<-`(c('x', 'y', 'lt_2', 'lt_4', 'lt_8', 'lt_12')) %>%
tidyr::pivot_longer(
dplyr::starts_with('lt'),
names_to = 'lead_time',
values_to = 'val'
) %>%
dplyr::mutate(
lead_time = stringr::str_replace(lead_time, 'lt_', '') %>% as.numeric(),
lead_time = lead_time - 1,
day = lubridate::as_date(day),
)
}
plot_sd <- function(sd, states) {
ggplot() +
geom_raster(aes(x=x, y=y, fill=val), sd) +
geom_sf(aes(), states, fill = NA) +
facet_grid(rows = dplyr::vars(src), cols = dplyr::vars(label), switch = 'y') +
plot_theme() +
labs(x='', y='', fill='Std. Dev.\nDrought\nCategory') +
scale_y_discrete(guide = guide_axis(check.overlap = TRUE)) +
theme(axis.text.x = element_text(angle = 45),
strip.placement = "outside",
plot.margin= grid::unit(c(0, 0, 0, 0), "in")) +
scale_fill_viridis_c()
}
plot_diff <- function(difference, states) {
pal <- colorRampPalette(RColorBrewer::brewer.pal(10, 'RdBu'))
ggplot() +
geom_raster(aes(x=x, y=y, fill=val), difference) +
geom_sf(aes(), states, fill = NA) +
facet_grid(rows = dplyr::vars(src), cols = dplyr::vars(label), switch = 'y') +
plot_theme() +
labs(x='', y='', fill='Difference') +
scale_fill_gradientn(na.value='grey26', colors = pal(100),limits = c(-3, 3)) +
theme(axis.text.x = element_text(angle = 45),
strip.placement = "outside",
plot.margin= grid::unit(c(0, 0, 0, 0), "in"))
}
plot_all <- function(f, target_dir='./data/tif_targets', states) {
day <- strip_date(f)
model <- clean_maps(f, states = states)
targets <- get_targets(target_dir, day, states)
# sd <- file.path(pred_dir, 'sd', base) %>%
#   get_sd(day, states) %>%
#   label_model(txt = ' Std. Dev. ') %>%
#   dplyr::mutate(src = 'Std. Dev.')
p1 <- targets %>%
map_to_tidy(day = day) %>%
label_targets() %>%
dplyr::mutate(src = 'Target') %>%
dplyr::filter(val != 'No Drought') %>%
plot_data(states = states)
p2 <- model %>%
map_to_tidy(day = day) %>%
label_model(txt = ' Forecast ') %>%
dplyr::mutate(src = 'Model') %>%
dplyr::filter(val != 'No Drought') %>%
plot_data(states = states)
p1/p2
# p3 <- plot_sd(sd, states)
# p4 <- plot_diff(difference, states)
#
# (p1)/(p2)/(p3)/(p4)
}
plot_flash <- function(f, target_dir='./data/tif_targets', states) {
flash_states <- states %>%
dplyr::filter(state_abbv %in% c('MT', 'WY', 'SD', 'ND'))
day <- strip_date(f)
model <- clean_maps(f, states = states)
targets <- get_targets(target_dir, day, states)
sd <- file.path(dirname(dirname(f)), 'sd') %>%
list.files(pattern = day, full.names = T) %>%
get_sd(day, states) %>%
label_model(txt = ' Std. Dev. ') %>%
dplyr::mutate(src = 'Std. Dev.')
p1 <- targets %>%
map_to_tidy(day = day) %>%
label_targets() %>%
dplyr::mutate(src = 'Target') %>%
dplyr::filter(val != 'No Drought') %>%
plot_data(states = states)
p2 <- model %>%
map_to_tidy(day = day) %>%
label_model(txt = ' Forecast ') %>%
dplyr::mutate(src = 'Model') %>%
dplyr::filter(val != 'No Drought') %>%
plot_data(states = states)
p1/p2
# p3 <- plot_sd(sd, states)
# p4 <- plot_diff(difference, states)
#
# (p1)/(p2)/(p3)/(p4)
}
# lead time on x axis
f = './data/models/avg/median/20170606_preds_None.tif'
flash_states <- states %>%
dplyr::filter(state_abbv %in% c('MT', 'WY', 'SD', 'ND'))
day <- strip_date(f)
model <- clean_maps(f, states = states)
targets <- get_targets(target_dir, day, states)
sd <- file.path(dirname(dirname(f)), 'sd') %>%
list.files(pattern = day, full.names = T) %>%
get_sd(day, states) %>%
label_model(txt = ' Std. Dev. ') %>%
dplyr::mutate(src = 'Std. Dev.')
target_dir = './data/out_classes/tif/'
targets <- get_targets(target_dir, day, states)
warnings()
sd <- file.path(dirname(dirname(f)), 'sd') %>%
list.files(pattern = day, full.names = T) %>%
get_sd(day, states) %>%
label_model(txt = ' Std. Dev. ') %>%
dplyr::mutate(src = 'Std. Dev.')
p3 <- plot_sd(sd, states)
p3
f
f %>% dirname()
f %>% dirname() %>% dir()
f %>% dirname() %>% dirname()
f %>% dirname() %>% dirname() %>% file.path('sd')
day <- strip_date(f)
model <- clean_maps(f, states = flash_states)
max <- file.path(dirname(dirname(f)), 'max') %>%
list.files(pattern = day, full.names = T) %>%
clean_maps(states = flash_states)
targets <- get_targets(target_dir, day, flash_states)
max
p3 <- plot_sd(sd, flash_states)
p4 <- max %>%
map_to_tidy(day = day) %>%
label_model(txt = ' Ensemble Max ') %>%
dplyr::mutate(src = 'Ens. Max') %>%
dplyr::filter(val != 'No Drought') %>%
plot_data(states = flash_states)
p1/p2/p3/p4
p1 <- targets %>%
map_to_tidy(day = day) %>%
label_targets() %>%
dplyr::mutate(src = 'Target') %>%
dplyr::filter(val != 'No Drought') %>%
plot_data(states = flash_states)
p2 <- model %>%
map_to_tidy(day = day) %>%
label_model(txt = ' Forecast ') %>%
dplyr::mutate(src = 'Model') %>%
dplyr::filter(val != 'No Drought') %>%
plot_data(states = flash_states)
p1/p2/p3/p4
get_sd <- function(f, day, states) {
f %>%
clean_maps(states = states) %>%
raster::mask(states) %>%
raster::rasterToPoints() %>%
tibble::as_tibble() %>%
`names<-`(c('x', 'y', 'lt_2', 'lt_4', 'lt_8', 'lt_12')) %>%
tidyr::pivot_longer(
dplyr::starts_with('lt'),
names_to = 'lead_time',
values_to = 'val'
) %>%
dplyr::mutate(
lead_time = stringr::str_replace(lead_time, 'lt_', '') %>% as.numeric(),
lead_time = lead_time - 1,
day = lubridate::as_date(day),
)
}
sd <- file.path(dirname(dirname(f)), 'sd') %>%
list.files(pattern = day, full.names = T) %>%
get_sd(day, states) %>%
label_model(txt = ' Std. Dev. ') %>%
dplyr::mutate(src = 'Std. Dev.')
p3 <- plot_sd(sd, flash_states)
p1/p2/p4/p3
sd <- file.path(dirname(dirname(f)), 'sd') %>%
list.files(pattern = day, full.names = T) %>%
get_sd(day, flash_states) %>%
label_model(txt = ' Std. Dev. ') %>%
dplyr::mutate(src = 'Std. Dev.')
p3 <- plot_sd(sd, flash_states)
p1/p2/p4/p3
plot_flash <- function(f, target_dir='./data/tif_targets', states) {
flash_states <- states %>%
dplyr::filter(state_abbv %in% c('MT', 'WY', 'SD', 'ND'))
day <- strip_date(f)
model <- clean_maps(f, states = flash_states)
max <- file.path(dirname(dirname(f)), 'max') %>%
list.files(pattern = day, full.names = T) %>%
clean_maps(states = flash_states)
targets <- get_targets(target_dir, day, flash_states)
sd <- file.path(dirname(dirname(f)), 'sd') %>%
list.files(pattern = day, full.names = T) %>%
get_sd(day, flash_states) %>%
label_model(txt = ' Std. Dev. ') %>%
dplyr::mutate(src = 'Std. Dev.')
p1 <- targets %>%
map_to_tidy(day = day) %>%
label_targets() %>%
dplyr::mutate(src = 'Target') %>%
dplyr::filter(val != 'No Drought') %>%
plot_data(states = flash_states)
p2 <- model %>%
map_to_tidy(day = day) %>%
label_model(txt = ' Forecast ') %>%
dplyr::mutate(src = 'Model') %>%
dplyr::filter(val != 'No Drought') %>%
plot_data(states = flash_states)
p3 <- plot_sd(sd, flash_states)
p4 <- max %>%
map_to_tidy(day = day) %>%
label_model(txt = ' Ensemble Max ') %>%
dplyr::mutate(src = 'Ens. Max') %>%
dplyr::filter(val != 'No Drought') %>%
plot_data(states = flash_states)
p1/p2/p4/p3
}
f
plot_flash("./data/models/avg/median/20170620_preds_None.tif", states = states, target_dir = './data/out_classes/tif')
plot_flash("./data/models/avg/median/20170627_preds_None.tif", states = states, target_dir = './data/out_classes/tif')
plot_flash("./data/models/avg/median/20170606_preds_None.tif", states = states, target_dir = './data/out_classes/tif')
list.files('./data/out_classes/tif', full.names = T)
test <- list.files('./data/out_classes/tif', full.names = T) %>%
raster::stack()
library(magrittr)
test <- list.files('./data/out_classes/tif', full.names = T) %>%
raster::stack()
test
fours <- test
fours[fours != 4] <- 0
fours[fours == 4] <- 1
fives <- test
fives[fives != 5] <- 0
fives[fives == 5] <- 1
raster::raster('./data/out_classes/tif/20070807_USDM.tif') %>% raster::plot()
library(magrittr)
library(ggplot2)
library(patchwork)
source('./crdm/R/PlotTheme.R')
states <- urbnmapr::get_urbn_map(sf = TRUE) %>%
dplyr::filter(state_abbv != 'AK', state_abbv != 'HI') %>%
sf::st_transform(6933)
dat <- fst::read_fst('./data/plot_data/monthly_holdouts.fst') %>%
tibble::as_tibble()
out <- dat %>%
tidyr::pivot_longer(
cols = dplyr::starts_with('lt_'),
names_to = 'lead_time'
)  %>%
dplyr::group_by(holdout, lead_time) %>%
dplyr::summarise(value = mean(value)) %>%
tidyr::pivot_wider(names_from = holdout, values_from = value) %>%
tidyr::pivot_longer(
-c(lead_time, None),
names_to = 'holdout',
values_to = 'value'
) %>%
dplyr::mutate(
diff = None - value
)
out %>%
dplyr::arrange(lead_time, diff) %>%
dplyr::group_by(lead_time) %>%
dplyr::mutate(rank = factor(1:dplyr::n()),
lead_time = stringr::str_replace(lead_time, 'lt_', ''),
lead_time = factor(as.numeric(lead_time)),
holdout = dplyr::recode(
holdout,
'gpp' = 'GPP',
'ET' = 'ET',
'pr' = 'PPT',
'rmax' = 'RH Max',
'rmin' = 'RH Min',
'sm-rootzone' = 'RZSM',
'sm-surface' = 'SFSM',
'srad' = 'SRAD',
'tmmn' = 'TMIN',
'tmmx' = 'TMAX',
'vpd' = 'VPD',
'vs' = 'WS'
)) %>%
ggplot(aes(x=lead_time, y= rank)) +
geom_text(aes(label=holdout)) +
labs(x = 'Lead Time (Weeks)', y = '(More Important) -------------------------------- Predictor Importance -------------------------------- (Less Important)') +
plot_theme()
library(magrittr)
library(kableExtra)
readr::read_csv('./data/plot_data/complete_err.csv') %>%
dplyr::mutate(`Lead Time` = glue::glue('{1:12} Week')) %>%
dplyr::select(c(`Lead Time`, train_mse, test_mse, val_mse, train_cor, test_cor, val_cor)) %>%
dplyr::rename(`Train MSE` = train_mse, `Spatial MSE` = test_mse,
`Temporal MSE` = val_mse, `Train Corr.` = train_cor,
`Spatial Corr.` = test_cor, `Temporal Corr.` = val_cor) %>%
kbl() %>%
kable_classic() %>%
add_header_above(c(" " = 1, "MSE (USDM Categories)" = 3, 'Correlation (Pearson)' = 3))
readr::read_csv('./data/plot_data/complete_err.csv') %>%
dplyr::mutate(`Lead Time` = glue::glue('{1:12} Week'))
readr::read_csv('./data/plot_data/complete_err.csv') %>%
dplyr::mutate(`Lead Time` = glue::glue('{1:12} Week')) %>%
dplyr::mutate(across(dplyr::ends_with('cor'), ~ .x**2))
readr::read_csv('./data/plot_data/complete_err.csv') %>%
dplyr::mutate(`Lead Time` = glue::glue('{1:12} Week')) %>%
dplyr::mutate(across(dplyr::ends_with('cor'), ~ .x**2)) %>%
dplyr::select(c(`Lead Time`, train_mse, test_mse, val_mse, train_cor, test_cor, val_cor)) %>%
dplyr::rename(`Train MSE` = train_mse, `Spatial MSE` = test_mse,
`Temporal MSE` = val_mse, `Train Corr.` = train_cor,
`Spatial Corr.` = test_cor, `Temporal Corr.` = val_cor) %>%
kbl() %>%
kable_classic() %>%
add_header_above(c(" " = 1, "MSE (USDM Categories)" = 3, 'Correlation (R^2)' = 3))
readr::read_csv('./data/plot_data/complete_err.csv') %>%
dplyr::mutate(`Lead Time` = glue::glue('{1:12} Week')) %>%
dplyr::mutate(across(dplyr::ends_with('cor'), ~ .x**2),
across(is.numeric(), ~round(.x, 4))) %>%
dplyr::select(c(`Lead Time`, train_mse, test_mse, val_mse, train_cor, test_cor, val_cor)) %>%
dplyr::rename(`Train MSE` = train_mse, `Spatial MSE` = test_mse,
`Temporal MSE` = val_mse, `Train Corr.` = train_cor,
`Spatial Corr.` = test_cor, `Temporal Corr.` = val_cor) %>%
kbl() %>%
kable_classic() %>%
add_header_above(c(" " = 1, "MSE (USDM Categories)" = 3, 'Correlation (R^2)' = 3))
readr::read_csv('./data/plot_data/complete_err.csv') %>%
dplyr::mutate(`Lead Time` = glue::glue('{1:12} Week')) %>%
dplyr::mutate(across(dplyr::ends_with('cor'), ~ .x**2),
across(is.numeric, ~round(.x, 4))) %>%
dplyr::select(c(`Lead Time`, train_mse, test_mse, val_mse, train_cor, test_cor, val_cor)) %>%
dplyr::rename(`Train MSE` = train_mse, `Spatial MSE` = test_mse,
`Temporal MSE` = val_mse, `Train Corr.` = train_cor,
`Spatial Corr.` = test_cor, `Temporal Corr.` = val_cor) %>%
kbl() %>%
kable_classic() %>%
add_header_above(c(" " = 1, "MSE (USDM Categories)" = 3, 'Correlation (R^2)' = 3))
where
