dplyr::mutate(ensemble = ens,
err_type = err)
}
f_dir %>%
list.files(full.names = T, pattern = 'err.p', recursive = T) %>%
grep('old_norm_methods', ., value = T, invert = T) %>%
lapply(read_file) %>%
dplyr::bind_rows() %>%
tidyr::pivot_longer(c(train, test), names_to='set') %>%
dplyr::mutate(batch = factor(batch),
hiddenSize = factor(hiddenSize),
nWeeks = factor(nWeeks),
numLayers = factor(numLayers)) -> a
a
a %>%
dplyr::filter(set == 'test', err_type = 'cce') %>%
ggplot(aes(x=epoch, y=value, color=ensemble)) +
geom_line()
a %>%
dplyr::filter(set == 'test', err_type == 'cce') %>%
ggplot(aes(x=epoch, y=value, color=ensemble)) +
geom_line()
f_dir %>%
list.files(full.names = T, pattern = 'err.p', recursive = T) %>%
grep('old_norm_methods', ., value = T, invert = T) %>%
lapply(read_file) %>%
dplyr::bind_rows() %>%
tidyr::pivot_longer(c(train, test), names_to='set') %>%
dplyr::mutate(batch = factor(batch),
hiddenSize = factor(hiddenSize),
nWeeks = factor(nWeeks),
numLayers = factor(numLayers),
ensemble = factor(ensemble)) -> a
a %>%
dplyr::filter(set == 'test', err_type == 'cce') %>%
ggplot(aes(x=epoch, y=value, color=ensemble)) +
geom_line()
a
a %>%
dplyr::filter(set == 'test', err_type == 'cce')
a %>%
dplyr::filter(set == 'test', err_type == 'cce') %>%
ggplot(aes(x=epoch, y=value, color=ensemble)) +
geom_line()
a
a %>%
dplyr::filter(set == 'test', err_type == 'cce') %$% unique(ensemble)
a %>%
dplyr::filter(set == 'test', err_type == 'cce') %>%
ggplot(aes(x=epoch, y=value)) +
geom_line()
read_file <- function(f) {
tmp <- f %>%
stringr::str_split('/') %>%
unlist()
ens <- tmp %>%
tail(2) %>%
magrittr::extract(1) %>%
stringr::str_sub(-1, -1) %>%
as.numeric()
err <- tmp %>%
tail(3) %>%
magrittr::extract(1) %>%
stringr::str_split('_') %>%
unlist() %>%
magrittr::extract(1)
read_pickle(f) %>%
lapply(function(x) lapply(x,mean)) %>%
lapply(tibble::as_tibble) %>%
dplyr::bind_rows(.id = 'epoch') %>%
dplyr::mutate(f = basename(f)) %>%
tidyr::separate(
f,
c('epochs', 'batch', 'nWeeks', 'hiddenSize',
'rmFeatures', 'init', 'numLayers', 'stateful', 'fType'),
sep='_'
) %>%
dplyr::mutate_at(
c('epochs', 'batch', 'nWeeks', 'hiddenSize',
'rmFeatures', 'init', 'numLayers', 'stateful', 'fType'),
strip_text
) %>%
dplyr::mutate_at(c('epoch', 'batch', 'nWeeks', 'hiddenSize',
'numLayers'), as.numeric
) %>%
dplyr::mutate(ensemble = ens,
err_type = err)
}
f_dir %>%
list.files(full.names = T, pattern = 'err.p', recursive = T) %>%
grep('old_norm_methods', ., value = T, invert = T) %>%
lapply(read_file) %>%
dplyr::bind_rows() %>%
tidyr::pivot_longer(c(train, test), names_to='set') %>%
dplyr::mutate(batch = factor(batch),
hiddenSize = factor(hiddenSize),
nWeeks = factor(nWeeks),
numLayers = factor(numLayers),
ensemble = factor(ensemble)) -> a
a %>%
dplyr::filter(set == 'test', err_type == 'cce') %>%
ggplot(aes(x=epoch, y=value, color=ensemble)) +
geom_line()
a %>%
dplyr::filter(set == 'test', err_type == 'cce', epoch >=6) %>%
ggplot(aes(x=epoch, y=value, color=ensemble)) +
geom_line()
a %>%
dplyr::filter(set == 'test', err_type == 'mse') %>%
ggplot(aes(x=epoch, y=value, color=ensemble)) +
geom_line()
a %>%
dplyr::filter(err_type == 'mse') %>%
ggplot(aes(x=epoch, y=value, color=set)) +
geom_line() +
facet_wrap(~ensemble) +
labs(x='Epoch', y='Loss', color='Set') +
plot_theme()
a %>%
dplyr::filter(err_type == 'cce') %>%
ggplot(aes(x=epoch, y=value, color=set)) +
geom_line() +
facet_wrap(~ensemble) +
labs(x='Epoch', y='Loss', color='Set') +
plot_theme()
a %>%
dplyr::filter(set = 'train', err_type == 'cce') %>%
ggplot(aes(x=epoch, y=value, color=set)) +
geom_line() +
facet_wrap(~ensemble) +
labs(x='Epoch', y='Loss', color='Set') +
plot_theme()
a %>%
dplyr::filter(set == 'train', err_type == 'cce') %>%
ggplot(aes(x=epoch, y=value, color=set)) +
geom_line() +
facet_wrap(~ensemble) +
labs(x='Epoch', y='Loss', color='Set') +
plot_theme()
sqrt(0.01)
sqrt(0.02)
sqrt(0.01)/4
sqrt(0.02)/4
sqrt(0.02/4)
install.packages("cowplot")
library(ggplot2)
library(magrittr)
source('https://raw.githubusercontent.com/colinbrust/CRDM/develop/crdm/R/PlotTheme.R')
map_dir = './data/model_results/weekly_maps/mse_stateful_ensemble'
states <- urbnmapr::get_urbn_map(sf = TRUE) %>%
dplyr::filter(state_abbv != 'AK', state_abbv != 'HI') %>%
sf::st_transform(6933)
true_dir = ''./data/out_classes/out_tif''
true_dir = './data/out_classes/out_tif'
true_dir <- true_dir %>%
list.files(full.names = T) %>%
tibble::tibble(true_fname = .) %>%
dplyr::mutate(
d = basename(true_fname) %>%
stringr::str_sub(1, 8) %>%
lubridate::as_date()
)
list.files(map_dir,full.names = T) %>%
expand.grid(., 1:4) %>%
tibble::as_tibble() %>%
`colnames<-`(c('fname', 'band'))
list.files(map_dir,full.names = T) %>%
magrittr::extract(1) %>%
list.files(full.names = T) %>%
expand.grid(., 1:4) %>%
tibble::as_tibble() %>%
`colnames<-`(c('fname', 'band'))
library(ggplot2)
library(magrittr)
source('https://raw.githubusercontent.com/colinbrust/CRDM/develop/crdm/R/PlotTheme.R')
map_to_tidy <- function(f, band) {
f %>%
raster::raster() %>%
raster::rasterToPoints() %>%
tibble::as_tibble() %>%
`colnames<-`(c('x', 'y', 'val')) %>%
dplyr::mutate(val = as.character(val),
val = dplyr::recode(
val,
`0` = 'No Drought',
`1` = 'D0',
`2` = 'D1',
`3` = 'D2',
`4` = 'D3',
`5` = 'D4'),
lead_time = band*2)
}
plot_single <- function(dat, states) {
ggplot() +
geom_raster(aes(x=x, y=y, fill=val), dat) +
geom_sf(aes(), states, fill = NA) +
labs(x='', y='', fill='Drought\nCategory') +
scale_fill_manual(values = c('No Drought' = NA,
'D0' = '#FFFF00',
'D1' = '#FCD37F',
'D2' = '#FFAA00',
'D3' = '#E60000',
'D4' = '#730000')) +
facet_wrap(~lab, nrow=2) +
plot_theme()
}
plot_fun <- function(dat, states, out_dir) {
print(unique(dat$fname))
f_maps <- dat %$%
purrr::map2(fname, band, map_to_tidy) %>%
dplyr::bind_rows() %>%
dplyr::mutate(lab = paste(lead_time, 'Week Forecast')) %>%
plot_single(states = states) +
ggtitle(paste('Forecasts of USDM for', unique(dat$d))) +
theme(legend.position = "none")
true_map <- dat %$%
unique(true_fname) %>%
map_to_tidy(band=1) %>%
dplyr::mutate(lab = 'True USDM Drought')  %>%
plot_single(states = states)
fig <- cowplot::plot_grid(f_maps, true_map, nrow=2, rel_heights = c(2, 1))
out_name  = file.path(
out_dir,
paste0(unique(dat$d) %>% stringr::str_replace_all('-', ''), '_preds.png')
)
ggsave(out_name, fig, width = 220, height = 195, units = 'mm',
dpi = 300)
}
save_all <- function(true_dir, map_dir, out_dir) {
states <- urbnmapr::get_urbn_map(sf = TRUE) %>%
dplyr::filter(state_abbv != 'AK', state_abbv != 'HI') %>%
sf::st_transform(6933)
true_dir <- true_dir %>%
list.files(full.names = T) %>%
tibble::tibble(true_fname = .) %>%
dplyr::mutate(
d = basename(true_fname) %>%
stringr::str_sub(1, 8) %>%
lubridate::as_date()
)
list.files(map_dir,full.names = T) %>%
magrittr::extract(1) %>%
list.files(full.names = T) %>%
expand.grid(., 1:4) %>%
tibble::as_tibble() %>%
`colnames<-`(c('fname', 'band')) %>%
dplyr::mutate(
fname = as.character(fname),
d = basename(fname) %>%
stringr::str_sub(1, 8) %>%
lubridate::as_date(),
d = d + band*2*7
) %>%
dplyr::left_join(true_dir, by='d') %>%
split(.$d) %>%
lapply(plot_fun, states = states, out_dir = out_dir)
}
save_all(
'./data/out_classes/out_tif',
'./data/model_results/weekly_maps/mse_stateful_ensemble',
'./data/model_results/weekly_maps/cce_stateless/pred_maps'
)
true_dir
list.files(map_dir,full.names = T) %>%
magrittr::extract(1) %>%
list.files(full.names = T) %>%
expand.grid(., 1:4) %>%
tibble::as_tibble() %>%
`colnames<-`(c('fname', 'band')) %>%
dplyr::mutate(
fname = as.character(fname),
d = basename(fname) %>%
stringr::str_sub(1, 8) %>%
lubridate::as_date(),
d = d + band*2*7
) %>%
dplyr::left_join(true_dir, by='d') %>%
split(.$d)
list.files(map_dir,full.names = T) %>%
magrittr::extract(1) %>%
list.files(full.names = T) %>%
expand.grid(., 1:4) %>%
tibble::as_tibble() %>%
`colnames<-`(c('fname', 'band')) %>%
dplyr::mutate(
fname = as.character(fname),
d = basename(fname) %>%
stringr::str_sub(1, 8) %>%
lubridate::as_date(),
d = d + band*2*7
) %>%
dplyr::left_join(true_dir, by='d') %>%
split(.$d) -> a
a
Filter(function(x) nrow(x) == 4, a)
list.files(map_dir,full.names = T) %>%
magrittr::extract(1) %>%
list.files(full.names = T) %>%
expand.grid(., 1:4) %>%
tibble::as_tibble() %>%
`colnames<-`(c('fname', 'band')) %>%
dplyr::mutate(
fname = as.character(fname),
d = basename(fname) %>%
stringr::str_sub(1, 8) %>%
lubridate::as_date(),
d = d + band*2*7
) %>%
dplyr::left_join(true_dir, by='d') %>%
split(.$d) %>%
Filter(function(x) nrow(x) == 4, .) -> a
a
dat <- a %>% magrittr::extract(1)
dat
f_maps <- dat %$%
purrr::map2(fname, band, map_to_tidy) %>%
dplyr::bind_rows() %>%
dplyr::mutate(lab = paste(lead_time, 'Week Forecast')) %>%
plot_single(states = states) +
ggtitle(paste('Forecasts of USDM for', unique(dat$d))) +
theme(legend.position = "none")
dat
dat %>% unname()
dat %>% unname()[[1]] -> dat
dat %>% unname()-> dat
dat
dat = dat[[1]]
dat
f_maps <- dat %$%
purrr::map2(fname, band, map_to_tidy) %>%
dplyr::bind_rows() %>%
dplyr::mutate(lab = paste(lead_time, 'Week Forecast')) %>%
plot_single(states = states) +
ggtitle(paste('Forecasts of USDM for', unique(dat$d))) +
theme(legend.position = "none")
f_maps
f_maps <- dat %$%
purrr::map2(fname, band, map_to_tidy) %>%
dplyr::bind_rows() %>%
dplyr::mutate(lab = paste(lead_time, 'Week Forecast'))
f_maps
f_maps %>% ggplot(aes(x=x, y=y, fill=val)) + geom_raster() + facet_wrap(lab)
f_maps %>% ggplot(aes(x=x, y=y, fill=val)) + geom_raster() + facet_wrap(~lab)
f_maps
f_maps %>% dplyr::filter(lead_time == 2) %>% ggplot(aes(x=x, y=y, fill=val)) + geom_raster()
f_maps %>% dplyr::filter(lead_time == 2) %>% dplyr::mutate(val = as.numeric(val)) %>% ggplot(aes(x=x, y=y, fill=val)) + geom_raster()
f_maps <- dat %$%
purrr::map2(fname, band, map_to_tidy) %>%
dplyr::bind_rows() %>%
dplyr::mutate(lab = paste(lead_time, 'Week Forecast'),
val = ifelse(continuous, as.numeric(val), val))
continuous = T
f_maps <- dat %$%
purrr::map2(fname, band, map_to_tidy) %>%
dplyr::bind_rows() %>%
dplyr::mutate(lab = paste(lead_time, 'Week Forecast'),
val = ifelse(continuous, as.numeric(val), val))
f_maps %>% ggplot(aes(x=x, y=y, fill=val)) + geom_raster() + facet_wrap(~lab)
f_maps
map_to_tidy <- function(f, band) {
f %>%
raster::raster() %>%
raster::rasterToPoints() %>%
tibble::as_tibble() %>%
`colnames<-`(c('x', 'y', 'val')) # %>%
# dplyr::mutate(val = as.character(val),
#               val = dplyr::recode(
#                 val,
#                 `0` = 'No Drought',
#                 `1` = 'D0',
#                 `2` = 'D1',
#                 `3` = 'D2',
#                 `4` = 'D3',
#                 `5` = 'D4'),
#                lead_time = band*2)
}
f_maps <- dat %$%
purrr::map2(fname, band, map_to_tidy) %>%
dplyr::bind_rows() %>%
dplyr::mutate(lab = paste(lead_time, 'Week Forecast'))
map_to_tidy <- function(f, band) {
f %>%
raster::raster() %>%
raster::rasterToPoints() %>%
tibble::as_tibble() %>%
`colnames<-`(c('x', 'y', 'val'))  %>%
dplyr::mutate(lead_time = band*2)
# dplyr::mutate(val = as.character(val),
#               val = dplyr::recode(
#                 val,
#                 `0` = 'No Drought',
#                 `1` = 'D0',
#                 `2` = 'D1',
#                 `3` = 'D2',
#                 `4` = 'D3',
#                 `5` = 'D4'),
#                lead_time = band*2)
}
f_maps <- dat %$%
purrr::map2(fname, band, map_to_tidy) %>%
dplyr::bind_rows() %>%
dplyr::mutate(lab = paste(lead_time, 'Week Forecast'))
f_maps
f_maps <- dat %$%
purrr::map2(fname, band, map_to_tidy) %>%
dplyr::bind_rows() %>%
dplyr::mutate(lab = paste(lead_time, 'Week Forecast'))
f_maps %>% ggplot(aes(x=x, y=y, fill=val)) + geom_raster() + facet_wrap(~lab)
true_map <- dat %$%
unique(true_fname) %>%
map_to_tidy(band=1) %>%
dplyr::mutate(lab = 'True USDM Drought')  %>%
plot_single(states = states)
true_map
true_map <- dat %$%
unique(true_fname) %>%
map_to_tidy(band=1) %>%
dplyr::mutate(lab = 'True USDM Drought')
true_map
true_map <- dat %$%
unique(true_fname) %>%
map_to_tidy(band=1) %>%
dplyr::mutate(lab = 'True USDM Drought',
val = ifelse(continuous, val/5, val))  %>%
plot_single(states = states)
true_map
true_map <- dat %$%
unique(true_fname) %>%
map_to_tidy(band=1) %>%
dplyr::mutate(lab = 'True USDM Drought',
val = ifelse(continuous, val/5, val))
true_map
unique(true_map$val)
true_map <- dat %$%
unique(true_fname) %>%
map_to_tidy(band=1)
unique(true_map$val)
if(continuous) {print('a')}
val
true_map <- dat %$%
unique(true_fname) %>%
map_to_tidy(band=1) %>%
dplyr::mutate(lab = 'True USDM Drought',
val/5)
unique(true_map$val)
true_map <- dat %$%
unique(true_fname) %>%
map_to_tidy(band=1) %>%
dplyr::mutate(lab = 'True USDM Drought',
val = val/5)
unique(true_map$val)
true_map <- dat %$%
unique(true_fname) %>%
map_to_tidy(band=1) %>%
dplyr::mutate(lab = 'True USDM Drought',
val = val/5)  %>%
plot_single(states = states)
true_map
true_map
plot_single <- function(dat, states) {
ggplot() +
geom_raster(aes(x=x, y=y, fill=val), dat) +
geom_sf(aes(), states, fill = NA) +
labs(x='', y='', fill='Drought\nCategory') +
# scale_fill_manual(values = c('No Drought' = NA,
#                              'D0' = '#FFFF00',
#                              'D1' = '#FCD37F',
#                              'D2' = '#FFAA00',
#                              'D3' = '#E60000',
#                              'D4' = '#730000')) +
facet_wrap(~lab, nrow=2) +
plot_theme()
}
true_map <- dat %$%
unique(true_fname) %>%
map_to_tidy(band=1) %>%
dplyr::mutate(lab = 'True USDM Drought',
val = val/5)  %>%
plot_single(states = states)
true_map
f_maps <- dat %$%
purrr::map2(fname, band, map_to_tidy) %>%
dplyr::bind_rows() %>%
dplyr::mutate(lab = paste(lead_time, 'Week Forecast')) %>%
plot_single(states = states) +
ggtitle(paste('Forecasts of USDM for', unique(dat$d))) +
theme(legend.position = "none")
fig <- cowplot::plot_grid(f_maps, true_map, nrow=2, rel_heights = c(2, 1))
fig
raster::raster('./data/in_features/week_norm/20191028_sm-rootzone.tif') %>% raster::plot()
raster::raster('./data/in_features/weekly//20191028_sm-rootzone.tif') %>%
raster::plot(0)
raster::raster('./data/in_features/weekly//20191028_sm-rootzone.tif') -> a
a
raster::raster('./data/in_features/weekly//20191028_sm-surface.tif') -> a
raster::raster('./data/in_features/weekly/20190506_sm-surface.tif') -> a
raster::raster('./data/in_features/weekly/20000110_sm-surface.tif') -> a
raster::plot(a)
a
raster::raster('./data/in_features/monthly/20090201_gpp.tif') %>% raster::plot()
raster::raster('./data/in_features/monthly/20090201_gpp.tif')
raster::raster('./data/in_features/monthly/20090201_gpp.tif') %>% raster::values()
raster::raster('./data/in_features/monthly/20090201_gpp.tif') %>% raster::`NAvalue<-`(-9999) %>% raster::values()
raster::raster('./data/in_features/monthly/20090201_ET.tif') %>% raster::plot()
raster::raster('./data/in_features/monthly/20090201_ET.tif') %>% raster::values()
raster::raster('./data/in_features/weekly/20190325_fw.tif') -> a
a
raster::plot(a)
raster::raster('./data/in_features/weekly/20190325_VOD.tif') -> a
a
raster::plot(a)
raster::values(a)
